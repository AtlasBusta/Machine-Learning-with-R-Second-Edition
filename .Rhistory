mnbg = aggregate(x=dfi$newstrength,by=list(dfi$b,dfi$g),FUN="mean")
mnbd = aggregate(x=dfi$newstrength,by=list(dfi$b,dfi$d),FUN="mean")
xcol = rbind(mnbs,mnbr,mnbg,mnbd, mnds,mndr,mndg,mndb,
mngs,mngr,mngd,mngb, mnrs,mnrg,mnrd,mnrb, mnsr,mnsg,mnsd,mnsb)
gi = rep(c("b*s","b*r","b*g","b*d",
"d*s","d*r","d*g","d*b",
"g*s","g*r","g*d","g*b",
"r*s","r*g","r*d","r*b",
"s*r","s*g","s*d","s*b"),each=4)
dff = data.frame(gi,xcol)
## Generate the lattice plot.
sp = c(T,F,F,F,F, F,T,F,F,F, F,F,T,F,F, F,F,F,T,F, F,F,F,F,T)
xyplot(x ~ Group.1 | gi, data=dff, group=Group.2,
layout=c(5,5), skip=sp, xlim=c(-2,2),
ylab = "Transformed Strength", xlab = "Factor Level",
main = "Blue: low level, Pink: high level",
type=c("p","l"), pch=20, cex=1, col=c(4,6),
panel=function(x,y,...){panel.superpose(x,y,...)})
trellis.focus("toplevel") ## has coordinate system [0,1] x [0,1]
panel.text(0.200, 0.200, "Batch",     cex=1)
panel.text(0.365, 0.365, "Direction", cex=1)
panel.text(0.515, 0.515, "Grit",      cex=1)
panel.text(0.675, 0.675, "Rate",      cex=1)
panel.text(0.825, 0.825, "Speed",     cex=1)
trellis.unfocus()
setwd("~/GitHub/RStudio_datascience")
gc()
setwd("~/GitHub/Machine-Learning-with-R-Second-Edition/Chapter 10")
# read the sms data into the sms data frame
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
setwd("~/GitHub/Machine-Learning-with-R-Second-Edition/Chapter 04")
# read the sms data into the sms data frame
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
# examine the structure of the sms data
str(sms_raw)
# convert spam/ham to factor.
sms_raw$type <- factor(sms_raw$type)
# examine the type variable more carefully
str(sms_raw$type)
table(sms_raw$type)
# build a corpus using the text mining (tm) package
library(tm)
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
# examine the sms corpus
print(sms_corpus)
inspect(sms_corpus[1:2])
as.character(sms_corpus[[1]])
lapply(sms_corpus[1:2], as.character)
# clean up the corpus using tm_map()
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
# show the difference between sms_corpus and corpus_clean
as.character(sms_corpus[[1]])
as.character(sms_corpus_clean[[1]])
sms_corpus_clean <- tm_map(sms_corpus_clean, removeNumbers) # remove numbers
sms_corpus_clean <- tm_map(sms_corpus_clean, removeWords, stopwords()) # remove stop words
sms_corpus_clean <- tm_map(sms_corpus_clean, removePunctuation) # remove punctuation
# tip: create a custom function to replace (rather than remove) punctuation
removePunctuation("hello...world")
replacePunctuation <- function(x) { gsub("[[:punct:]]+", " ", x) }
replacePunctuation("hello...world")
# illustration of word stemming
library(SnowballC)
wordStem(c("learn", "learned", "learning", "learns"))
sms_corpus_clean <- tm_map(sms_corpus_clean, stemDocument)
sms_corpus_clean <- tm_map(sms_corpus_clean, stripWhitespace) # eliminate unneeded whitespace
# examine the final clean corpus
lapply(sms_corpus[1:3], as.character)
lapply(sms_corpus_clean[1:3], as.character)
# create a document-term sparse matrix
sms_dtm <- DocumentTermMatrix(sms_corpus_clean)
# alternative solution: create a document-term sparse matrix directly from the SMS corpus
sms_dtm2 <- DocumentTermMatrix(sms_corpus, control = list(
tolower = TRUE,
removeNumbers = TRUE,
stopwords = TRUE,
removePunctuation = TRUE,
stemming = TRUE
))
# alternative solution: using custom stop words function ensures identical result
sms_dtm3 <- DocumentTermMatrix(sms_corpus, control = list(
tolower = TRUE,
removeNumbers = TRUE,
stopwords = function(x) { removeWords(x, stopwords()) },
removePunctuation = TRUE,
stemming = TRUE
))
# compare the result
sms_dtm
sms_dtm2
sms_dtm3
# creating training and test datasets
sms_dtm_train <- sms_dtm[1:4169, ]
sms_dtm_test  <- sms_dtm[4170:5559, ]
# also save the labels
sms_train_labels <- sms_raw[1:4169, ]$type
sms_test_labels  <- sms_raw[4170:5559, ]$type
# check that the proportion of spam is similar
prop.table(table(sms_train_labels))
prop.table(table(sms_test_labels))
# word cloud visualization
library(wordcloud)
wordcloud(sms_corpus_clean, min.freq = 50, random.order = FALSE)
# subset the training data into spam and ham groups
spam <- subset(sms_raw, type == "spam")
ham  <- subset(sms_raw, type == "ham")
wordcloud(spam$text, max.words = 40, scale = c(3, 0.5))
wordcloud(ham$text, max.words = 40, scale = c(3, 0.5))
sms_dtm_freq_train <- removeSparseTerms(sms_dtm_train, 0.999)
sms_dtm_freq_train
# indicator features for frequent words
findFreqTerms(sms_dtm_train, 5)
# save frequently-appearing terms to a character vector
sms_freq_words <- findFreqTerms(sms_dtm_train, 5)
str(sms_freq_words)
# create DTMs with only the frequent terms
sms_dtm_freq_train <- sms_dtm_train[ , sms_freq_words]
sms_dtm_freq_test <- sms_dtm_test[ , sms_freq_words]
# convert counts to a factor
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
# apply() convert_counts() to columns of train/test data
sms_train <- apply(sms_dtm_freq_train, MARGIN = 2, convert_counts)
sms_test  <- apply(sms_dtm_freq_test, MARGIN = 2, convert_counts)
## Step 3: Training a model on the data ----
library(e1071)
sms_classifier <- naiveBayes(sms_train, sms_train_labels)
## Step 4: Evaluating model performance ----
sms_test_pred <- predict(sms_classifier, sms_test)
library(gmodels)
CrossTable(sms_test_pred, sms_test_labels,
prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
## Step 5: Improving model performance ----
sms_classifier2 <- naiveBayes(sms_train, sms_train_labels, laplace = 1)
sms_test_pred2 <- predict(sms_classifier2, sms_test)
CrossTable(sms_test_pred2, sms_test_labels,
prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
# Try new train and test splits
# Load necessary library
library(caTools)
# Function to split dataset
split_dataset <- function(features, labels, split_ratio) {
set.seed(123) # for reproducibility
split_index <- sample.split(labels, SplitRatio = split_ratio)
train_features <- features[split_index, ]
test_features <- features[!split_index, ]
train_labels <- labels[split_index]
test_labels <- labels[!split_index]
return(list("train_features" = train_features,
"test_features" = test_features,
"train_labels" = train_labels,
"test_labels" = test_labels))
}
# Combine datasets
combined_features <- rbind(sms_train, sms_test)
combined_labels <- c(sms_train_labels, sms_test_labels)
# Split the dataset into different ratios
splits <- list("50:50" = 0.5, "70:30" = 0.7, "75:25" = 0.75, "80:20" = 0.8, "90:10" = 0.9)
split_datasets <- lapply(splits, function(split_ratio) {
split_dataset(combined_features, combined_labels, split_ratio)
})
# Function to calculate and print proportion tables for train and test labels
calculate_proportions <- function(split_datasets) {
for (split in names(split_datasets)) {
cat("Proportions for", split, "split:\n")
cat("Train Labels:\n")
print(prop.table(table(split_datasets[[split]]$train_labels)))
cat("Test Labels:\n")
print(prop.table(table(split_datasets[[split]]$test_labels)))
cat("\n")
}
}
# Calculate and print proportions for all splits
calculate_proportions(split_datasets)
# Function to train, predict, and print cross table
train_predict_print <- function(split_datasets) {
results <- list() # To store results
for (split in names(split_datasets)) {
cat("Training and evaluating for split:", split, "\n")
# Train the model
model <- naiveBayes(split_datasets[[split]]$train_features, split_datasets[[split]]$train_labels)
# Make predictions
predictions <- predict(model, split_datasets[[split]]$test_features)
# Print cross table
cross_tab <- CrossTable(predictions, split_datasets[[split]]$test_labels,
prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
# Store results
results[[split]] <- list("model" = model, "predictions" = predictions, "cross_tab" = cross_tab)
cat("\n")
}
return(results)
}
# Use the function
model_results <- train_predict_print(split_datasets)
# obtain the predicted probabilities
sms_test_prob <- predict(sms_classifier, sms_test, type = "raw")
head(sms_test_prob)
# combine the results into a data frame
sms_results <- data.frame(actual_type = sms_test_labels,
predict_type = sms_test_pred,
prob_spam = round(sms_test_prob[ , 2], 5),
prob_ham = round(sms_test_prob[ , 1], 5))
# uncomment this line to output the sms_results to CSV
write.csv(sms_results, "sms_results.csv", row.names = FALSE)
## Confusion matrixes in R ----
sms_results <- read.csv("sms_results.csv")
# the first several test cases
head(sms_results)
setwd("~/GitHub/Machine-Learning-with-R-Second-Edition/Chapter 10")
# test cases where the model is less confident
head(subset(sms_results, prob_spam > 0.40 & prob_spam < 0.60))
# test cases where the model was wrong
head(subset(sms_results, actual_type != predict_type))
length(subset(sms_results, actual_type != predict_type))
count(subset(sms_results, actual_type != predict_type))
sum(subset(sms_results, actual_type != predict_type))
subset(sms_results, actual_type != predict_type)
lengths(subset(sms_results, actual_type != predict_type))
length(subset(sms_results, actual_type != predict_type)[1])
length(subset(sms_results, actual_type != predict_type)[1,])
length(subset(sms_results, actual_type != predict_type)[,1])
# test cases where the model is less confident
subset(sms_results, prob_spam > 0.40 & prob_spam < 0.60)
# specifying vectors
table(sms_results$actual_type, sms_results$predict_type)
# alternative solution using the formula interface (not shown in book)
xtabs(~ actual_type + predict_type, sms_results)
# using the CrossTable function
library(gmodels)
CrossTable(sms_results$actual_type, sms_results$predict_type)
# accuracy and error rate calculation --
# accuracy
(152 + 1203) / (152 + 1203 + 4 + 31)
# error rate
(4 + 31) / (152 + 1203 + 4 + 31)
# error rate = 1 - accuracy
1 - 0.9748201
## Beyond accuracy: other performance measures ----
library(caret)
confusionMatrix(sms_results$predict_type, sms_results$actual_type, positive = "spam")
## Confusion matrixes in R ----
sms_results <- read.csv("sms_results.csv")
confusionMatrix(sms_results$predict_type, sms_results$actual_type, positive = "spam")
# combine the results into a data frame
sms_results <- data.frame(actual_type = sms_test_labels,
predict_type = sms_test_pred,
prob_spam = round(sms_test_prob[ , 2], 5),
prob_ham = round(sms_test_prob[ , 1], 5))
confusionMatrix(sms_results$predict_type, sms_results$actual_type, positive = "spam")
precision_ <- posPredValue(sms_results$predict_type, sms_results$actual_type, positive = "spam")
recall_ <- sensitivity(sms_results$predict_type, sms_results$actual_type, positive = "spam")
#or
f_ < (2 * precision_ * recall_) / (precision_ + recall_)
f_
#or
f_ < (2 * precision_ * recall_) / (precision_ + recall_)
#or
f_ <- (2 * precision_ * recall_) / (precision_ + recall_)
f_
# F-measure
f <- (2 * prec * rec) / (prec + rec)
f
f <- (2 * 152) / (2 * 152 + 4 + 31)
f
# F-measure
f_ <- (2 * precision_ * recall_) / (precision_ + recall_)
f_
# calculate kappa via the vcd package
library(vcd)
# calculate kappa via the vcd package
library(vcd)
Kappa(table(sms_results$actual_type, sms_results$predict_type))
# calculate kappa via the irr package
library(irr)
kappa2(sms_results[1:2])
## Visualizing Performance Tradeoffs ----
library(ROCR)
pred <- prediction(predictions = sms_results$prob_spam,
labels = sms_results$actual_type)
# ROC curves
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, main = "ROC curve for SMS spam filter", col = "blue", lwd = 2)
# add a reference line to the graph
abline(a = 0, b = 1, lwd = 2, lty = 2)
# calculate AUC
perf.auc <- performance(pred, measure = "auc")
str(perf.auc)
unlist(perf.auc@y.values)
# partitioning data
library(caret)
credit <- read.csv("credit.csv")
gc()
gc()
credit <- read.csv("credit.csv")
# Holdout method
# using random IDs
random_ids <- order(runif(1000))
credit_train <- credit[random_ids[1:500],]
credit_validate <- credit[random_ids[501:750], ]
credit_test <- credit[random_ids[751:1000], ]
# check the classes
table(credit_train)
# check the classes
table(credit_train$default)
# check the classes
prop.table(table(credit_train$default))
prop.table(table(credit_validate$default))
prop.table(table(credit_test$default))
# using caret function Stratified Random Sampling
in_train <- createDataPartition(credit$default, p = 0.75, list = FALSE)
credit_train <- credit[in_train, ]
credit_test <- credit[-in_train, ]
#check classes
prop.table(table(credit_train$default))
prop.table(table(credit_validate$default))
prop.table(table(credit_test$default))
#check classes
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
# 10-fold CV
folds <- createFolds(credit$default, k = 10)
str(folds)
credit01_test <- credit[folds$Fold01, ]
credit01_train <- credit[-folds$Fold01, ]
## Automating 10-fold CV for a C5.0 Decision Tree using lapply() ----
library(caret)
library(C50)
library(irr)
credit <- read.csv("credit.csv")
set.seed(123)
folds <- createFolds(credit$default, k = 10)
cv_results <- lapply(folds, function(x) {
credit_train <- credit[-x, ]
credit_test <- credit[x, ]
credit_model <- C5.0(default ~ ., data = credit_train)
credit_pred <- predict(credit_model, credit_test)
credit_actual <- credit_test$default
kappa <- kappa2(data.frame(credit_actual, credit_pred))$value
return(kappa)
})
credit <- read.csv("credit.csv", stringsAsFactors = T)
set.seed(123)
folds <- createFolds(credit$default, k = 10)
cv_results <- lapply(folds, function(x) {
credit_train <- credit[-x, ]
credit_test <- credit[x, ]
credit_model <- C5.0(default ~ ., data = credit_train)
credit_pred <- predict(credit_model, credit_test)
credit_actual <- credit_test$default
kappa <- kappa2(data.frame(credit_actual, credit_pred))$value
return(kappa)
})
str(cv_results)
mean(unlist(cv_results))
?createFolds
setwd("~/GitHub/Machine-Learning-with-R-Second-Edition/Chapter 04")
# read the sms data into the sms data frame
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
# examine the structure of the sms data
str(sms_raw)
# convert spam/ham to factor.
sms_raw$type <- factor(sms_raw$type)
# examine the type variable more carefully
str(sms_raw$type)
table(sms_raw$type)
# build a corpus using the text mining (tm) package
library(tm)
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
# examine the sms corpus
print(sms_corpus)
inspect(sms_corpus[1:2])
as.character(sms_corpus[[1]])
lapply(sms_corpus[1:2], as.character)
# clean up the corpus using tm_map()
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
# show the difference between sms_corpus and corpus_clean
as.character(sms_corpus[[1]])
as.character(sms_corpus_clean[[1]])
sms_corpus_clean <- tm_map(sms_corpus_clean, removeNumbers) # remove numbers
sms_corpus_clean <- tm_map(sms_corpus_clean, removeWords, stopwords()) # remove stop words
sms_corpus_clean <- tm_map(sms_corpus_clean, removePunctuation) # remove punctuation
# tip: create a custom function to replace (rather than remove) punctuation
removePunctuation("hello...world")
replacePunctuation <- function(x) { gsub("[[:punct:]]+", " ", x) }
replacePunctuation("hello...world")
# illustration of word stemming
library(SnowballC)
wordStem(c("learn", "learned", "learning", "learns"))
sms_corpus_clean <- tm_map(sms_corpus_clean, stemDocument)
sms_corpus_clean <- tm_map(sms_corpus_clean, stripWhitespace) # eliminate unneeded whitespace
# examine the final clean corpus
lapply(sms_corpus[1:3], as.character)
lapply(sms_corpus_clean[1:3], as.character)
# create a document-term sparse matrix
sms_dtm <- DocumentTermMatrix(sms_corpus_clean)
# alternative solution: create a document-term sparse matrix directly from the SMS corpus
sms_dtm2 <- DocumentTermMatrix(sms_corpus, control = list(
tolower = TRUE,
removeNumbers = TRUE,
stopwords = TRUE,
removePunctuation = TRUE,
stemming = TRUE
))
# alternative solution: using custom stop words function ensures identical result
sms_dtm3 <- DocumentTermMatrix(sms_corpus, control = list(
tolower = TRUE,
removeNumbers = TRUE,
stopwords = function(x) { removeWords(x, stopwords()) },
removePunctuation = TRUE,
stemming = TRUE
))
# compare the result
sms_dtm
sms_dtm2
sms_dtm3
# creating training and test datasets
sms_dtm_train <- sms_dtm[1:4169, ]
sms_dtm_test  <- sms_dtm[4170:5559, ]
# also save the labels
sms_train_labels <- sms_raw[1:4169, ]$type
sms_test_labels  <- sms_raw[4170:5559, ]$type
# check that the proportion of spam is similar
prop.table(table(sms_train_labels))
prop.table(table(sms_test_labels))
# word cloud visualization
library(wordcloud)
wordcloud(sms_corpus_clean, min.freq = 50, random.order = FALSE)
# subset the training data into spam and ham groups
spam <- subset(sms_raw, type == "spam")
ham  <- subset(sms_raw, type == "ham")
wordcloud(spam$text, max.words = 40, scale = c(3, 0.5))
wordcloud(ham$text, max.words = 40, scale = c(3, 0.5))
sms_dtm_freq_train <- removeSparseTerms(sms_dtm_train, 0.999)
sms_dtm_freq_train
# indicator features for frequent words
findFreqTerms(sms_dtm_train, 5)
# save frequently-appearing terms to a character vector
sms_freq_words <- findFreqTerms(sms_dtm_train, 5)
str(sms_freq_words)
# create DTMs with only the frequent terms
sms_dtm_freq_train <- sms_dtm_train[ , sms_freq_words]
sms_dtm_freq_test <- sms_dtm_test[ , sms_freq_words]
# convert counts to a factor
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
# apply() convert_counts() to columns of train/test data
sms_train <- apply(sms_dtm_freq_train, MARGIN = 2, convert_counts)
sms_test  <- apply(sms_dtm_freq_test, MARGIN = 2, convert_counts)
## Step 3: Training a model on the data ----
library(e1071)
sms_classifier <- naiveBayes(sms_train, sms_train_labels)
## Step 4: Evaluating model performance ----
sms_test_pred <- predict(sms_classifier, sms_test)
library(gmodels)
CrossTable(sms_test_pred, sms_test_labels,
prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
## Step 5: Improving model performance ----
sms_classifier2 <- naiveBayes(sms_train, sms_train_labels, laplace = 1)
sms_test_pred2 <- predict(sms_classifier2, sms_test)
CrossTable(sms_test_pred2, sms_test_labels,
prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
## Example: Predicting Medical Expenses ----
## Step 2: Exploring and preparing the data ----
insurance <- read.csv("insurance.csv", stringsAsFactors = TRUE)
setwd("~/GitHub/Machine-Learning-with-R-Second-Edition/Chapter 06")
## Example: Predicting Medical Expenses ----
## Step 2: Exploring and preparing the data ----
insurance <- read.csv("insurance.csv", stringsAsFactors = TRUE)
str(insurance)
library(skimr)
skim(insurance)
# summarize the charges variable
summary(insurance$expenses)
# histogram of insurance charges
hist(insurance$expenses)
# table of region
table(insurance$region)
# exploring relationships among features: correlation matrix
cor(insurance[c("age", "bmi", "children", "expenses")])
# visualing relationships among features: scatterplot matrix
pairs(insurance[c("age", "bmi", "children", "expenses")])
# more informative scatterplot matrix
library(psych)
pairs.panels(insurance[c("age", "bmi", "children", "expenses")])
## Step 3: Training a model on the data ----
ins_model <- lm(expenses ~ age + children + bmi + sex + smoker + region,
data = insurance)
ins_model <- lm(expenses ~ ., data = insurance) # this is equivalent to above
# see the estimated beta coefficients
ins_model
## Step 4: Evaluating model performance ----
# see more detail about the estimated beta coefficients
summary(ins_model)
## Step 5: Improving model performance ----
# add a higher-order "age" term
insurance$age2 <- insurance$age^2
# add an indicator for BMI >= 30
insurance$bmi30 <- ifelse(insurance$bmi >= 30, 1, 0)
# create final model
ins_model2 <- lm(expenses ~ age + age2 + children + bmi + sex +
bmi30*smoker + region, data = insurance)
summary(ins_model2)
pairs.panels(insurance[c("age", "age2", "bmi", "bmi30", "children", "expenses")])
?psych
gc()
setwd("~/GitHub/Machine-Learning-with-R-Second-Edition")
